}
}
#Main libraries
library(readr)
library(vsn)
#Support functions also requires
library(ggplot2)
library(reshape)
library(pheatmap)
library(gridExtra)
library(grid)
library(cowplot)
library(ggrepel)
library(hexbin)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(decoupleR)
library(dorothea)
library(reshape2)
library(tidyr)
library(GSEABase)
library(fgsea)
library(factoextra)
library(NbClust)
source("scripts/support/support_functions.R")
cp_pathways <- import_gmt(gmtfile = 'supports/c2.cp.v7.2.symbols.gmt')
## Raw counts table
load(file = 'data/counts_result.RData')
gene_counts <- as.data.frame(counts_result$counts)
count_df <- gene_counts
#First we remove rows that contain only 0
count_df <- count_df[rowSums(count_df) > 0,]
#remaining 0 have to be made as NA so that log2 transformation is possible
count_df[count_df == 0] <- NA
names(count_df) <- gsub('.R1.fastq.gz.subread.BAM',"",names(count_df))
#make the plots
count_df_melt <- melt(log2(count_df))
ggplot(count_df_melt, aes(x = variable, y = value)) + geom_violin() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
count_df[log2(count_df) < 5] <- NA
count_df_melt <- melt(log2(count_df))
ggplot(count_df_melt, aes(x = variable, y = value)) + geom_violin() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
#remove rows (genes) which aren't well-measured in enough samples
count_df <- count_df[rowSums(is.na(count_df)) < 40,]
#now we can normalise the cleaned dataframe using vsn
fit <- vsnMatrix(as.matrix(count_df)) #train vsn parameters
#make sure the mean/sd trend is not going crazy
meanSdPlot(fit)
#if good, normalise data with the trained parameters of vsn
count_df_vsn <- as.data.frame(vsn::predict(fit,as.matrix(count_df)))
#now let's visualise the normalised data
targets <- as.data.frame(cbind(names(count_df_vsn),names(count_df_vsn)))
names(targets) <- c("sample","condition")
# plots <- magicPlotMakerLight(count_df_vsn, targets = targets)
# plot(plots[[1]])
# plot(plots[[2]])
map_table <- AnnotationDbi::mapIds(org.Hs.eg.db::org.Hs.eg.db, row.names(count_df_vsn),'SYMBOL','ENTREZID')
count_df_vsn$gene <- sapply(row.names(count_df_vsn), function(x, map_table){
return(map_table[x])
},map_table = map_table)
count_df_vsn <- count_df_vsn[!is.na(count_df_vsn$gene),]
row.names(count_df_vsn) <- count_df_vsn$gene
count_df_vsn <- count_df_vsn[,-dim(count_df_vsn)[2]]
count_df_vsn <- count_df_vsn[complete.cases(count_df_vsn),]
dorothea_df <- dorothea_hs
dorothea_df <- dorothea_df[dorothea_df$confidence %in% c("A","B","C"),]
dorothea_df$likelihood <- 1
# TF_activity_mean <- run_mean(mat = as.matrix(count_df_vsn), network = dorothea_df, minsize = 15, times = 10000)
# save(TF_activity_mean, file = 'results/RNA/TF_activity_mean.RData')
load('results/RNA/TF_activity_mean.RData')
TF_activity_mean <- TF_activity_mean[TF_activity_mean$statistic == "normalized_mean",]
TF_activity_mean <- TF_activity_mean[,-c(1,5,6)]
names(TF_activity_mean)[3] <- "value"
TF_activity_mean_df <- dcast(TF_activity_mean, tf ~ condition, value.var = "value")
row.names(TF_activity_mean_df) <- TF_activity_mean_df$tf
TF_activity_mean_df <- TF_activity_mean_df[,-1]
TF_activity_meanrank_df <- as.data.frame(apply(-TF_activity_mean_df, 2, base::rank))
# alternative clustering (these give small number of clusters, but we want to stratify more)
# Elbow method
df <- as.data.frame(t(TF_activity_meanrank_df))
fviz_nbclust(df, kmeans, method = "wss", k.max = 30) +
geom_vline(xintercept = 4, linetype = 2)+
labs(subtitle = "Elbow method")
# Silhouette method
fviz_nbclust(df, kmeans, method = "silhouette", k.max = 30)+
labs(subtitle = "Silhouette method")
clusters<- kmeans(df, 5, iter.max = 10000, nstart = 100)
targets$condition <- paste0("C",clusters$cluster)
table(targets$condition)
row.names(targets) <- targets$sample
metadata_df <- targets[,2,drop = F]
targets <- targets[order(targets$condition),]
TF_activity_mean_df <- TF_activity_mean_df[,targets$sample]
pheatmap(TF_activity_mean_df, annotation_col = metadata_df, cluster_cols = F, width = 15, height = 30)
TF_activity_cluster_avgrank <- sapply(unique(targets$condition), function(x, TF_activity_meanrank_df, targets){
df <- TF_activity_meanrank_df[,targets[targets$condition == x, 'sample']]
return(rowMeans(df))
}, TF_activity_meanrank_df = TF_activity_meanrank_df, targets = targets, USE.NAMES = T)
TF_activity_cluster_avgrank <- as.data.frame(TF_activity_cluster_avgrank)
SDs <- apply(TF_activity_cluster_avgrank, 1, sd)
SDs <- sort(SDs, decreasing = T)
SDs <- SDs[1:25]
TF_activity_cluster_avgrank_reduced <- TF_activity_cluster_avgrank[names(SDs),]
TF_activity_cluster_avgNES <- sapply(unique(targets$condition), function(x, TF_activity_mean_df, targets){
df <- TF_activity_mean_df[,targets[targets$condition == x, 'sample']]
return(rowMeans(df))
}, TF_activity_mean_df = TF_activity_mean_df, targets = targets, USE.NAMES = T)
TF_activity_cluster_avgNES <- as.data.frame(TF_activity_cluster_avgNES)
TF_activity_cluster_avgNES_reduced <- TF_activity_cluster_avgNES[names(SDs),]
clustering <- pheatmap(TF_activity_cluster_avgrank_reduced, silent = F)
col_order <- names(sort(TF_activity_cluster_avgNES['STAT2',])) #sort columns by STAT2 gradient
TF_activity_cluster_avgrank_reduced <- TF_activity_cluster_avgrank_reduced[clustering$tree_row$order, col_order]
TF_activity_cluster_avgNES_reduced <- TF_activity_cluster_avgNES_reduced[clustering$tree_row$order, col_order]
pheatmap(TF_activity_cluster_avgrank_reduced, cluster_rows = F, cluster_cols = F)
pheatmap(TF_activity_cluster_avgNES_reduced, cluster_rows = F, cluster_cols = F)
pathways_list <- list()
i <- 1
for(pathway in unique(cp_pathways$term))
{
pathways_list[[i]] <- cp_pathways[cp_pathways$term == pathway,"gene"]
i <- i+1
}
names(pathways_list) <- unique(cp_pathways$term)
fgsea_res_list <- sapply(names(count_df_vsn), function(x, count_df_vsn, cp_pathways){
genes <- row.names(count_df_vsn)
gene_stats <- count_df_vsn[,x]
names(gene_stats) <- genes
fgsea_res <- fgsea(pathways = cp_pathways, stats = gene_stats, nperm = 1000, nproc = 4, minSize = 1,
maxSize = Inf, gseaParam = 1, BPPARAM = NULL, scoreType = "pos")
return(fgsea_res)
},count_df_vsn = count_df_vsn, cp_pathways = cp_pathways)
View(count_df_vsn)
View(fgsea_res_list)
pathways_list <- list()
i <- 1
for(pathway in unique(cp_pathways$term))
{
pathways_list[[i]] <- cp_pathways[cp_pathways$term == pathway,"gene"]
i <- i+1
}
names(pathways_list) <- unique(cp_pathways$term)
fgsea_res_list <- lapply(names(count_df_vsn), function(x, count_df_vsn, cp_pathways){
genes <- row.names(count_df_vsn)
gene_stats <- count_df_vsn[,x]
names(gene_stats) <- genes
fgsea_res <- fgsea(pathways = cp_pathways, stats = gene_stats, nperm = 1000, nproc = 4, minSize = 1,
maxSize = Inf, gseaParam = 1, BPPARAM = NULL, scoreType = "pos")
return(fgsea_res)
},count_df_vsn = count_df_vsn, cp_pathways = cp_pathways)
pathways_list <- list()
i <- 1
for(pathway in unique(cp_pathways$term))
{
pathways_list[[i]] <- cp_pathways[cp_pathways$term == pathway,"gene"]
i <- i+1
}
names(pathways_list) <- unique(cp_pathways$term)
fgsea_res_list <- sapply(names(count_df_vsn), function(x, count_df_vsn, cp_pathways){
genes <- row.names(count_df_vsn)
gene_stats <- count_df_vsn[,x]
names(gene_stats) <- genes
fgsea_res <- fgsea(pathways = cp_pathways, stats = gene_stats, nperm = 1000, nproc = 4, minSize = 1,
maxSize = Inf, gseaParam = 1, BPPARAM = NULL, scoreType = "pos")
return(fgsea_res)
},count_df_vsn = count_df_vsn, cp_pathways = cp_pathways, simplify = F, USE.NAMES = T)
View(pathways_list)
View(fgsea_res_list)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '~/Dropbox/COSMOS_kidney_fibrosis_cohort_study/')
save(fgsea_res_list, file = "results/RNA/fgsea_cp.RData")
cp_pathways
gene_stats
genes <- row.names(count_df_vsn)
genes
View(dorothea_df)
View(cp_pathways)
View(cp_pathways)
names(cp_pathways) <- c("target","tf")
cp_pathways$mor <- 1
cp_pathways$likelihood <- 1
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '~/Dropbox/COSMOS_kidney_fibrosis_cohort_study/')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '~/Dropbox/COSMOS_kidney_fibrosis_cohort_study/')
import_gmt <- function(gmtfile, fast = T)
{
if(fast)
{
genesets = GSEABase::getGmt(con = gmtfile)
genesets = unlist(genesets)
gene_to_term =plyr::ldply(genesets,function(geneset){
temp <- geneIds(geneset)
temp2 <- setName(geneset)
temp3 <- as.data.frame(cbind(temp,rep(temp2,length(temp))))
},.progress = plyr::progress_text())
names(gene_to_term) <- c("gene","term")
return(gene_to_term[complete.cases(gene_to_term),])
}
else
{
genesets = getGmt(con = gmtfile)
genesets = unlist(genesets)
gene_to_term <- data.frame(NA,NA)
names(gene_to_term) <- c("gene","term")
for (geneset in genesets)
{
temp <- geneIds(geneset)
temp2 <- setName(geneset)
temp3 <- as.data.frame(cbind(temp,rep(temp2,length(temp))))
names(temp3) <- c("gene","term")
gene_to_term <- rbind(gene_to_term,temp3)
}
return(gene_to_term[complete.cases(gene_to_term),])
}
}
#Main libraries
library(readr)
library(vsn)
#Support functions also requires
library(ggplot2)
library(reshape)
library(pheatmap)
library(gridExtra)
library(grid)
library(cowplot)
library(ggrepel)
library(hexbin)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(decoupleR)
library(dorothea)
library(reshape2)
library(tidyr)
library(GSEABase)
library(fgsea)
library(progeny)
library(factoextra)
library(NbClust)
source("scripts/support/support_functions.R")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '~/Dropbox/COSMOS_kidney_fibrosis_cohort_study/')
source("scripts/support/support_functions.R")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '~/Dropbox/COSMOS_kidney_fibrosis_cohort_study/')
import_gmt <- function(gmtfile, fast = T)
{
if(fast)
{
genesets = GSEABase::getGmt(con = gmtfile)
genesets = unlist(genesets)
gene_to_term =plyr::ldply(genesets,function(geneset){
temp <- geneIds(geneset)
temp2 <- setName(geneset)
temp3 <- as.data.frame(cbind(temp,rep(temp2,length(temp))))
},.progress = plyr::progress_text())
names(gene_to_term) <- c("gene","term")
return(gene_to_term[complete.cases(gene_to_term),])
}
else
{
genesets = getGmt(con = gmtfile)
genesets = unlist(genesets)
gene_to_term <- data.frame(NA,NA)
names(gene_to_term) <- c("gene","term")
for (geneset in genesets)
{
temp <- geneIds(geneset)
temp2 <- setName(geneset)
temp3 <- as.data.frame(cbind(temp,rep(temp2,length(temp))))
names(temp3) <- c("gene","term")
gene_to_term <- rbind(gene_to_term,temp3)
}
return(gene_to_term[complete.cases(gene_to_term),])
}
}
#Main libraries
library(readr)
library(vsn)
#Support functions also requires
library(ggplot2)
library(reshape)
library(pheatmap)
library(gridExtra)
library(grid)
library(cowplot)
library(ggrepel)
library(hexbin)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(decoupleR)
library(dorothea)
library(reshape2)
library(tidyr)
library(GSEABase)
library(fgsea)
library(progeny)
library(factoextra)
library(NbClust)
source("scripts/support/support_functions.R")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '~/Dropbox/COSMOS_kidney_fibrosis_cohort_study/')
# Loading old sample data
df1 = read_delim('data/phospho/Phospho (STY)Sites-22685-quantifiedSites-Kidney-Cancer-vs-Healthy-Log2-Protein-Intensitites.txt', '\t', escape_double=FALSE, trim_ws=TRUE, na='NaN')
View(df1)
batches <- df1[,3]
batches <- df1[3,]
View(batches)
# Loading old sample data
df1 = read_delim('data/phospho/first_phospho_samples.txt', '\t', escape_double=FALSE, trim_ws=TRUE, na='NaN')
batches <- read_delim('supports/first_phospho_samples_info', '\t', escape_double=FALSE, trim_ws=TRUE, na='NaN')
View(batches)
library(cosmos)
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options()
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
my_options$solverPath <- "~/Documents/cplex"
#### FORWARD run of COSMOS, to connect signaling to metabolism
#The signaling inputs are the result of footprint based TF and kinase activity estiamtion
#For more info on TF activity estiamtion from transcriptomic data, see:https://github.com/saezlab/transcriptutorial (Especially chapter 4)
#Here we use of toy PKN, to see the full meta PKN, you can load it with load_meta_pkn()
#The metabolites in the prior knowledge network are identified as XMetab__PUBCHEMid___compartment____ or XMetab__BIGGid___compartment____
#for example “XMetab__6804___m____”. The compartment code is the BIGG model standard (r, c, e, x, m, l, n, g).
#Thus we will first need to map whatever identifer for metabolite the data has to the one of the network.
#Genes are identified as XENTREZid (in the signaling part of network) or XGene####__ENTREZid (in the reaction network part of network)
test_for <- preprocess_COSMOS_signaling_to_metabolism(signaling_data = toy_signaling_input_carnival_vec,
metabolic_data = toy_metab_input_carnival_vec,
diff_expression_data = toy_RNA,
maximum_network_depth = 15,
remove_unexpressed_nodes = T,
CARNIVAL_options = my_options
)
test_for <- preprocess_COSMOS_signaling_to_metabolism(signaling_data = toy_signaling_input_carnival_vec,
metabolic_data = toy_metab_input_carnival_vec,
diff_expression_data = toy_RNA,
maximum_network_depth = 15,
remove_unexpressed_nodes = T,
CARNIVAL_options = my_options,
filter_tf_gene_interaction_by_optimization = F
)
PKN <- test_for$meta_network
View(PKN)
ori_PKN <- load_meta_pkn()
View(ori_PKN)
library(readr)
library(dorothea)
library(omicToolsTest)
library(viper)
dorothea <- as.data.frame(dorothea_hs[dorothea_hs$confidence %in% c("A","B","C"),])
dorothea_viper <- df_to_viper_regulon(dorothea[,c(3,1,4)])
transcriptomics_log2fc <- as.data.frame(read_delim("~/Dropbox/beltrao_CPTAC/data/updated/cptac_data/rna/transcriptomics_log2fpkm.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
names(transcriptomics_log2fc)[1] <- "ID"
row.names(transcriptomics_log2fc) <- transcriptomics_log2fc$ID
transcriptomics_log2fc <- transcriptomics_log2fc[,-1]
TFactivity <- as.data.frame(viper(eset = transcriptomics_log2fc, regulon = dorothea_viper, minsize = 5, adaptive.size = F, eset.filter = F))
library(readr)
library(dorothea)
library(omicToolsTest)
library(viper)
dorothea <- as.data.frame(dorothea_hs[dorothea_hs$confidence %in% c("A","B","C"),])
write_csv(dorothea, "~/Dropbox/beltrao_CPTAC/support/dorothea_ABC.csv")
dorothea_viper <- df_to_viper_regulon(dorothea[,c(3,1,4)])
transcriptomics_log2fc <- as.data.frame(read_delim("Dropbox/beltrao_CPTAC/data/updated/cptac_data/rna/transcriptomics_log2fc.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
names(transcriptomics_log2fc)[1] <- "ID"
row.names(transcriptomics_log2fc) <- transcriptomics_log2fc$ID
transcriptomics_log2fc <- transcriptomics_log2fc[,-1]
TFactivity <- as.data.frame(viper(eset = transcriptomics_log2fc, regulon = dorothea_viper, minsize = 5, adaptive.size = F, eset.filter = F))
# dorothea <- as.data.frame(dorothea_hs[dorothea_hs$confidence %in% c("A","B","C"),])
#
# write_csv(dorothea, "~/Dropbox/beltrao_CPTAC/support/dorothea_ABC.csv")
dorothea <- as.data.frame(read_csv("~/Dropbox/beltrao_CPTAC/support/dorothea_ABC.csv"))
View(dorothea)
library(readr)
library(dorothea)
library(omicToolsTest)
library(viper)
# dorothea <- as.data.frame(dorothea_hs[dorothea_hs$confidence %in% c("A","B","C"),])
#
# write_csv(dorothea, "~/Dropbox/beltrao_CPTAC/support/dorothea_ABC.csv")
dorothea <- as.data.frame(read_csv("~/Dropbox/beltrao_CPTAC/support/dorothea_ABC.csv"))
dorothea_viper <- df_to_viper_regulon(dorothea[,c(3,1,4)])
transcriptomics_log2fc <- as.data.frame(read_delim("Dropbox/beltrao_CPTAC/data/updated/cptac_data/rna/transcriptomics_log2fc.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
names(transcriptomics_log2fc)[1] <- "ID"
row.names(transcriptomics_log2fc) <- transcriptomics_log2fc$ID
transcriptomics_log2fc <- transcriptomics_log2fc[,-1]
TFactivity <- as.data.frame(viper(eset = transcriptomics_log2fc, regulon = dorothea_viper, minsize = 5, adaptive.size = F, eset.filter = F))
View(TFactivity)
View(transcriptomics_log2fc)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
# Packages:
library(minet)
library(viper)
library(vsn)
library(infotheo)
library(igraph)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '~/Dropbox/network-inference-by-aracne-in-R/')
# Chunk 2
# Packages:
library(minet)
library(viper)
library(vsn)
library(infotheo)
library(igraph)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '~/Dropbox/network-inference-by-aracne-in-R/')
# Chunk 2
# Packages:
library(minet)
library(viper)
library(vsn)
library(infotheo)
library(igraph)
# Raw data:
raw_data= read.table("GSE119931_PANC1.FOXA2KO.genes.counts.txt", header = TRUE)
# Extract the counts data and renames its rows:
raw_counts=raw_data[,c(7:12)]
rownames(raw_counts)= raw_data$Geneid
# Raw data:
raw_data= read.table("GSE119931_PANC1.FOXA2KO.genes.counts.txt", header = TRUE)
# Extract the counts data and renames its rows:
raw_counts=raw_data[,c(7:12)]
rownames(raw_counts)= raw_data$Geneid
# Raw data:
raw_data= read.table("GSE119931_PANC1.FOXA2KO.genes.counts.txt", header = TRUE)
# Extract the counts data and renames its rows:
raw_counts=raw_data[,c(7:12)]
rownames(raw_counts)= raw_data$Geneid
# Raw data:
raw_data= read.table("GSE119931_PANC1.FOXA2KO.genes.counts.txt", header = TRUE)
# Extract the counts data and renames its rows:
raw_counts=raw_data[,c(7:12)]
rownames(raw_counts)= raw_data$Geneid
# Raw data:
raw_data= read.table("GSE119931_PANC1.FOXA2KO.genes.counts.txt", header = TRUE)
# Raw data:
raw_data= read.table("GSE119931_PANC1.FOXA2KO.genes.counts.txt", header = TRUE)
getwd()
knitr::opts_chunk$set(echo = TRUE, )
knitr::opts_knit$set(root.dir = '~/Dropbox/network-inference-by-aracne-in-R/')
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '~/Dropbox/network-inference-by-aracne-in-R/')
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '~/Dropbox/network-inference-by-aracne-in-R/')
# Packages:
library(minet)
library(viper)
library(vsn)
library(infotheo)
library(igraph)
getwd()
# Raw data:
raw_data= read.table("GSE119931_PANC1.FOXA2KO.genes.counts.txt", header = TRUE)
# Extract the counts data and renames its rows:
raw_counts=raw_data[,c(7:12)]
rownames(raw_counts)= raw_data$Geneid
getwd()
knitr::opts_knit$set(root.dir = '/Users/Aurelien/Dropbox/network-inference-by-aracne-in-R/')
getwd()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/Aurelien/Dropbox/network-inference-by-aracne-in-R/')
getwd()
# Chunk 2
# Packages:
library(minet)
library(viper)
library(vsn)
library(infotheo)
library(igraph)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("minet")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/Aurelien/Dropbox/network-inference-by-aracne-in-R/')
getwd()
# Chunk 2
# Packages:
library(minet)
library(viper)
library(vsn)
library(infotheo)
library(igraph)
# Raw data:
raw_data= read.table("GSE119931_PANC1.FOXA2KO.genes.counts.txt", header = TRUE)
# Extract the counts data and renames its rows:
raw_counts=raw_data[,c(7:12)]
rownames(raw_counts)= raw_data$Geneid
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/Aurelien/Dropbox/network-inference-by-aracne-in-R/')
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/Aurelien/Dropbox/network-inference-by-aracne-in-R/')
getwd()
setwd("~/Dropbox/network-inference-by-aracne-in-R")
getwd()
